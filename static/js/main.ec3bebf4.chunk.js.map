{"version":3,"sources":["logo.svg","Components/TableCell.jsx","App.js","reportWebVitals.js","index.js"],"names":["Cell","props","addRow","col","state","cols","setState","rows","i","push","delRow","splice","addCol","table","console","log","j","length","delCol","newCol","onClick","this","Component","App","className","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qQAAe,I,8CC0FAA,G,wDAvFX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAQVC,OAAS,WACL,IAAIC,EAAK,GACT,GAAG,EAAKC,MAAMC,KAAO,EACjB,EAAKC,SAAS,CACVC,KAAK,GAAD,mBAAM,EAAKH,MAAMG,MAAjB,CAAuB,6BAAI,iCAGnC,CACA,IAAI,IAAIC,EAAI,EAAEA,EAAE,EAAKJ,MAAMC,KAAK,EAAEG,IAC9BL,EAAIM,KAAK,wBAEb,EAAKH,SAAS,CACVC,KAAK,GAAD,mBAAM,EAAKH,MAAMG,MAAjB,CAAuB,6BAAKJ,UArB1B,EA0BlBO,OAAS,WACL,EAAKJ,SAAS,CACVC,KAAM,EAAKH,MAAMG,KAAKI,OAAO,MA5BnB,EAgClBC,OAAS,WACL,EAAKN,SAAS,CACVD,KAAM,EAAKD,MAAMC,KAAK,IAE1B,IAAIQ,EAAQ,EAAKT,MAAMG,KAEnBJ,EAAM,GACVW,QAAQC,IAAI,EAAKX,MAAMC,MAEvB,IAAI,IAAIW,EAAI,EAAGA,EAAE,EAAKZ,MAAMC,KAAKW,IAC7Bb,EAAIM,KAAK,wBAEb,IAAI,IAAID,EAAI,EAAGA,EAAEK,EAAMI,OAAOT,IAC1BK,EAAML,GAAK,6BAAKL,IAEpB,EAAKG,SAAS,CACVC,KAAMM,KAhDI,EAoDlBK,OAAS,WACL,GAAG,EAAKd,MAAMC,KAAK,EAAE,CAEjB,IAAIQ,EAAQ,EAAKT,MAAMG,KACnBY,EAAS,EAAKf,MAAMC,KAAK,EAC7BS,QAAQC,IAAII,EAAO,IAAI,EAAKf,MAAMC,MAElC,IADA,IAAIF,EAAM,GACFa,EAAI,EAAGA,EAAEG,EAAO,EAAEH,IACtBb,EAAIM,KAAK,wBAEb,IAAI,IAAID,EAAI,EAAGA,EAAEK,EAAMI,OAAOT,IAC1BK,EAAML,GAAK,6BAAKL,IAEpB,EAAKG,SAAS,CACVC,KAAMM,EACNR,KAAM,EAAKD,MAAMC,KAAK,MAjE9B,EAAKD,MAAM,CACPG,KAAM,GACNF,KAAM,GAJI,E,qDAwEd,OACI,gCACI,wBAAQe,QAASC,KAAKnB,OAAtB,qBACA,wBAAQkB,QAASC,KAAKX,OAAtB,qBACA,wBAAQU,QAASC,KAAKT,OAAtB,qBACA,wBAAQQ,QAASC,KAAKH,OAAtB,qBACA,gCACI,gCACKG,KAAKjB,MAAMG,gB,GAjFjBe,cCYJC,MAVf,WACE,OAEE,sBAAKC,UAAU,MAAf,UACE,cAAC,EAAD,IACA,uBAAOC,GAAK,aCGHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ec3bebf4.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {Component} from 'react';\r\nimport './TableCell.css'\r\nclass Cell extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={\r\n            rows: [],\r\n            cols: 2\r\n        }\r\n    }\r\n\r\n    //adds rows to grid\r\n    addRow = () =>{\r\n        let col =[];\r\n        if(this.state.cols < 2){\r\n            this.setState({\r\n                rows: [...this.state.rows, <tr><td></td></tr>]\r\n            })\r\n        }\r\n        else{\r\n            for(let i = 0;i<this.state.cols-1;i++){\r\n                col.push(<td></td>)\r\n            }\r\n            this.setState({\r\n                rows: [...this.state.rows, <tr>{col}</tr>]\r\n            })\r\n        }\r\n    }\r\n    //removes rows from grid\r\n    delRow = () =>{\r\n        this.setState({\r\n            rows: this.state.rows.splice(1)\r\n        })\r\n    }\r\n    //adds columns to grid\r\n    addCol = () =>{\r\n        this.setState({\r\n            cols: this.state.cols+1\r\n        })\r\n        let table = this.state.rows;\r\n\r\n        let col = [];\r\n        console.log(this.state.cols)\r\n        \r\n        for(let j = 0; j<this.state.cols;j++){\r\n            col.push(<td></td>);\r\n        }\r\n        for(let i = 0; i<table.length;i++){\r\n            table[i] = <tr>{col}</tr>;\r\n        }\r\n        this.setState({\r\n            rows: table\r\n        })\r\n    }\r\n    //removes columns from grid\r\n    delCol = () =>{\r\n        if(this.state.cols>0){\r\n\r\n            let table = this.state.rows;\r\n            let newCol = this.state.cols-1;\r\n            console.log(newCol+\" \"+this.state.cols)\r\n            let col = [];\r\n            for(let j = 0; j<newCol-1;j++){\r\n                col.push(<td></td>);\r\n            }\r\n            for(let i = 0; i<table.length;i++){\r\n                table[i] = <tr>{col}</tr>;\r\n            }\r\n            this.setState({\r\n                rows: table,\r\n                cols: this.state.cols-1\r\n            })\r\n        }\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <button onClick={this.addRow}>Add Row</button>\r\n                <button onClick={this.delRow}>del Row</button>\r\n                <button onClick={this.addCol}>Add col</button>\r\n                <button onClick={this.delCol}>del col</button>\r\n                <table> \r\n                    <tbody>\r\n                        {this.state.rows}\r\n                    </tbody>\r\n                </table> \r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Cell;\r\n","import logo from './logo.svg';\r\nimport './App.css';\r\nimport Table from './Components/Table';\r\nimport TableCell from './Components/TableCell'\r\nfunction App() {\r\n  return (\r\n\r\n    <div className=\"App\">\r\n      <TableCell/>\r\n      <table id = \"tabl\"></table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}